name: parse ref semver

on:
  workflow_call:
    inputs:
      ref:
        description: The git ref to parse the version from
        required: true
        type: string
    outputs:
      package-scope:
        description: The package scope (if any) from the tag (e.g. @scope/package-name@v1.2.3 -> scope)
        value: ${{ jobs.parse.outputs.package-scope }}
      package-name:
        description: The package name (if any) from the tag (e.g. @scope/package-name@v1.2.3 -> package-name)
        value: ${{ jobs.parse.outputs.package-name }}
      major:
        description: The major version from the tag (e.g. v1.2.3 -> 1)
        value: ${{ jobs.parse.outputs.major }}
      minor:
        description: The minor version from the tag (e.g. v1.2.3 -> 2)
        value: ${{ jobs.parse.outputs.minor }}
      patch:
        description: The patch version from the tag (e.g. v1.2.3 -> 3)
        value: ${{ jobs.parse.outputs.patch }}
      prerelease:
        description: The prerelease version from the tag (e.g. v1.2.3-alpha.1 -> alpha.1)
        value: ${{ jobs.parse.outputs.prerelease }}
      build:
        description: The build metadata from the tag (e.g. v1.2.3+build.1 -> build.1)
        value: ${{ jobs.parse.outputs.buildmetadata }}

jobs:
  parse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract version from tag
        id: get_version
        run: |
          # Extract the tag name from the ref by removing the "refs/tags/"
          # prefix. (e.g. refs/tags/v1.2.3 -> v1.2.3)
          TAG_NAME=$(sed 's/^\([^\/]*\/\)*//' <<< ${{ github.ref }})

          # An altered version of the regex from https://semver.org/ which also
          # matches the optional package scope and name, and allows for a
          # leading "v" character before the major version.
          # e.g. @scope/package-name@v1.2.3
          # https://regex101.com/r/RSCxla/1
          REGEX="^((@([^\/]*))?\/?([^\s]+)@)?v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$"
          if [[ $TAG_NAME =~ $REGEX ]]; then
            echo "package-scope=${BASH_REMATCH[3]}" >> "$GITHUB_OUTPUT"
            echo "package-name=${BASH_REMATCH[4]}" >> "$GITHUB_OUTPUT"
            echo "major=${BASH_REMATCH[5]}" >> "$GITHUB_OUTPUT"
            echo "minor=${BASH_REMATCH[6]}" >> "$GITHUB_OUTPUT"
            echo "patch=${BASH_REMATCH[7]}" >> "$GITHUB_OUTPUT"
            echo "prerelease=${BASH_REMATCH[8]}" >> "$GITHUB_OUTPUT"
            echo "build=${BASH_REMATCH[9]}" >> "$GITHUB_OUTPUT"
          else
            echo "Tag does not match the expected format"
            exit 1
          fi
